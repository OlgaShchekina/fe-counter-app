{"version":3,"sources":["Counter.js","AddCounterForm.js","ConfirmationDelete.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","props","counter","increment","decrement","remove","className","id","name","onClick","count","AddCounterForm","useState","setName","setCount","type","value","onChange","e","target","onSubmit","Number","ConfirmationDelete","isDisabledDeleteConfirmationButton","setIsDisabledDeleteConfirmationButton","Modal","isOpen","Boolean","toggle","onCancel","ModalHeader","ModalBody","FormGroup","Input","placeholder","inputText","trim","toLowerCase","ModalFooter","Button","color","onSuccess","disabled","App","counters","setCounters","confirmCounter","setConfirmCounter","incrementCounter","console","log","index","findIndex","el","newCounters","decrementCounter","map","confirmRemoveCounter","reduce","acc","cur","key","Math","random","filter","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d37ebda.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Counter(props) {\n\n  const {counter, increment, decrement, remove} = props;\n\n  return (\n    <div className='card mb-2'>\n      <div className='card-body'>\n\n        <div className=\"row\">\n\n          <div className=\"col\">\n            ID <strong>{counter.id}</strong>\n          </div>\n\n          <div className=\"col\">\n            Counter name <strong>{counter.name}</strong>\n          </div>\n\n          <div className=\"col\">\n\n            <button onClick={() => decrement(counter.id)}\n                    className='btn btn-primary'>-\n            </button>\n\n            <strong>{counter.count}</strong>\n\n            <button onClick={() => increment(counter.id)}\n                    className='btn btn-primary'>+\n            </button>\n          </div>\n\n          <div className=\"col\">\n            <button onClick={() => remove(counter)}\n                    className='btn btn-danger'>Delete\n            </button>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Counter;\n","import React, {useState} from 'react';\nimport './App.css';\n\nfunction AddCounterForm(props) {\n\n  const [name, setName] = useState('---');\n  const [count, setCount] = useState(456);\n\n  const onSubmit = () => {\n    props.onSubmit(name, Number(count));\n    setName('');\n    setCount(0);\n  };\n\n  return (\n    <div className='row'>\n\n      <div className=\"col\">\n\n        <input type=\"text\" name='name' value={name}\n               className='form-control'\n               onChange={e => setName(e.target.value)}/>\n      </div>\n\n      <div className=\"col\">\n\n        <input type=\"number\" name='count' value={count}\n               className='form-control'\n               onChange={e => setCount(e.target.value)}/>\n      </div>\n\n      <div className=\"col\">\n\n        <button onClick={() => onSubmit(name, count)} className='btn btn-secondary'>Create</button>\n      </div>\n\n    </div>\n  );\n}\n\nexport default AddCounterForm;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  FormGroup,\n  Input,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader\n} from 'reactstrap';\n\nexport default function ConfirmationDelete(props) {\n  const [isDisabledDeleteConfirmationButton, setIsDisabledDeleteConfirmationButton] = useState(true);\n\n  const modalConfirmationUserInputChange = (e) => {\n    const inputText = e.target.value;\n    setIsDisabledDeleteConfirmationButton(inputText.trim().toLowerCase() !== props.name.trim().toLowerCase());\n  };\n\n  const deleteButtonClick = () => {\n    setIsDisabledDeleteConfirmationButton(true);\n    props.onSuccess();\n\n  };\n\n  const cancelButtonClick = () => {\n    setIsDisabledDeleteConfirmationButton(true);\n    props.onCancel();\n  };\n\n  return (\n    <Modal isOpen={Boolean(props.name)} toggle={props.onCancel}>\n      <ModalHeader>Delete confirmation</ModalHeader>\n\n      <ModalBody>\n\n        <p>\n          Enter counter name <strong>{props.name}</strong> to\n          delete it\n        </p>\n\n        <FormGroup>\n          <Input type=\"email\"\n                 name=\"email\"\n                 id=\"exampleEmail\"\n                 placeholder=\"with a placeholder\"\n                 onChange={modalConfirmationUserInputChange}\n\n          />\n        </FormGroup>\n      </ModalBody>\n\n      <ModalFooter>\n        <Button color=\"danger\"\n                onClick={deleteButtonClick}\n                disabled={isDisabledDeleteConfirmationButton}>Delete</Button>\n\n        <Button color=\"secondary\"\n                onClick={cancelButtonClick}>Cancel</Button>\n      </ModalFooter>\n    </Modal>);\n}","import React, { useState } from 'react';\nimport './App.css';\nimport Counter from './Counter';\nimport AddCounterForm from './AddCounterForm';\nimport ConfirmationDelete from './ConfirmationDelete';\n\nfunction App() {\n\n  const InitialCountersState = [\n    { id: 123, name: 'Counter 1', count: 2 },\n    { id: 234, name: 'Counter 2', count: 5 },\n    { id: 345, name: 'Counter 3', count: 8 },\n    { id: 456, name: 'Counter 4', count: 48 },\n  ];\n\n  const [counters, setCounters] = useState(InitialCountersState);\n  const [confirmCounter, setConfirmCounter] = useState({});\n\n\n  const resetTotalCount = () => {\n    console.log('resetTotalCount');\n    const newCounters = counters.map(el => ({ ...el, count: 0 }));\n    setCounters(newCounters);\n  };\n\n  const incrementCounter = (id) => {\n    console.log('INC ' + id);\n    const index = counters.findIndex(el => el.id === id);\n    const newCounters = [...counters];\n    newCounters[index].count = newCounters[index].count + 1;\n    setCounters(newCounters);\n  };\n\n  const decrementCounter = (id) => {\n    console.log('DECR ' + id);\n    const newCounters = counters.map(el => {\n      if (el.id === id) return { ...el, count: el.count - 1 };\n      return el;\n    });\n    setCounters(newCounters);\n  };\n\n  const confirmRemoveCounter = counter => {\n    setConfirmCounter(counter);\n  };\n\n  const removeConfirmed = () => {\n    const newCounters = counters.filter(el => el.id !== confirmCounter.id);\n    setCounters(newCounters);\n    setConfirmCounter({});\n  };\n\n  const confirmDeleteCancel = () => {\n    setConfirmCounter({})\n  };\n\n  const addCounter = (name, count) => {\n    const newCounters = [...counters, {\n      id: Math.random(),\n      name,\n      count: count\n    }];\n    setCounters(newCounters);\n  };\n\n\n  return (\n    <div className='container'>\n      <h1>Counters</h1>\n\n      Total {counters.reduce((acc, cur) => acc + cur.count, 0)}\n      <button onClick={resetTotalCount} className='btn btn-danger'>Reset total\n        count\n      </button>\n\n      <hr />\n\n      {\n        counters.map(el => <Counter key={el.id}\n                                    counter={el}\n                                    increment={incrementCounter}\n                                    decrement={decrementCounter}\n                                    remove={confirmRemoveCounter}\n        />)\n      }\n\n      <hr />\n\n      <AddCounterForm onSubmit={addCounter} />\n\n      <ConfirmationDelete\n        name={confirmCounter.name}\n        onSuccess={removeConfirmed}\n        onCancel={confirmDeleteCancel}\n      />\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}